/*
 * Copyright 2010 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.nurserostering.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import org.optaplanner.examples.nurserostering.domain.DayOfWeek;
import org.optaplanner.examples.nurserostering.domain.Ta;
import org.optaplanner.examples.nurserostering.domain.CourseAssignment;
import org.optaplanner.examples.nurserostering.domain.NurseRoster;
import org.optaplanner.examples.nurserostering.domain.Course;
import org.optaplanner.examples.nurserostering.domain.CourseDay;
import org.optaplanner.examples.nurserostering.domain.CourseType;
import org.optaplanner.examples.nurserostering.domain.contract.Contract;
import org.optaplanner.examples.nurserostering.domain.contract.BooleanContractLine;
import org.optaplanner.examples.nurserostering.domain.contract.ContractLine;
import org.optaplanner.examples.nurserostering.domain.contract.ContractLineType;
import org.optaplanner.examples.nurserostering.domain.contract.MinMaxContractLine;
import org.optaplanner.examples.nurserostering.domain.request.CourseOffRequest;
import org.optaplanner.examples.nurserostering.domain.request.CourseOnRequest;
import org.optaplanner.examples.nurserostering.solver.drools.TaAssignmentTotal;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints (all equally important)
// ############################################################################

/* Course off request symbolizes that a TA cannot assist with a course
 * due to incompatible schedules (i.e. the times that they are available
 * do not match up with the times that the course is being taught).
 */
rule "courseOffRequest"
    when
        $courseOffRequest : CourseOffRequest($ta : ta, $course : course)
        $assignment : CourseAssignment(ta == $ta, course == $course)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end


/* If a particular course requires more than 1 TA, then we need
 * to ensure that it gets assigned to two different TAs, otherwise
 */
rule "oneTypePerDay"
    when
        $left : CourseAssignment($id : id, $ta : ta, $courseDay : courseDay, $courseType : course.courseType, ta != null)
        $right : CourseAssignment(ta == $ta, courseDay == $courseDay, course.courseType == $courseType, id > $id)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end


/* Recall that a coursetype in this application's context is information pertaining to
 * a specific course. A course itself is a mapping of a coursetype to a particular day.
 * If a coursetype spans more than one day (it could be offered on Monday and Wednesday,
 * for example), then the same TA must be assigned to that course.
 */
rule "sameCourseDifferentDaySameTA"
    when
        $assignment : CourseAssignment($ta : ta, $courseDay : courseDay, $courseType : course.courseType, ta != null)
        $result : CourseAssignment(ta != $ta, courseDay != $courseDay, course.courseType == $courseType)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// Soft constraints
// ############################################################################

/* This rule is necessary to enforce the min/max course assignments.
 * I believe it essentially sets the min/max course assignments
 * rules based on whether or not they are present in the input file.
 */
rule "insertTaAssignmentTotal"
        salience 1 // Do these rules first (optional, for performance)
    when
        MinMaxContractLine(contractLineType == ContractLineType.TOTAL_ASSIGNMENTS, enabled == true,
            $contract : contract)
        $ta : Ta(contract == $contract)
        $assignmentTotal : Number() from accumulate(
            $assignment : CourseAssignment(ta == $ta),
            count($assignment)
        )
    then
        insertLogical(new TaAssignmentTotal($ta, $assignmentTotal.intValue()));
end


/* Some instructors may prefer to have a certain TA
 * assist with certain courses. These should be
 * taken into consideratio when scheduling.
 */
rule "courseOnRequest"
    when
        $courseOnRequest : CourseOnRequest($ta : ta, $course : course, $weight : weight)
        not CourseAssignment(ta == $ta, course == $course)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight);
end


/* A TA should not be assigned to more than two courses per day */
rule "noMoreThanTwoCoursesPerDay"
    when
        $firstAssignment : CourseAssignment($firstId : id, $ta : ta, $courseDay : courseDay, ta != null)
        $secondAssignment : CourseAssignment($secondId : id, ta == $ta, courseDay == $courseDay, id != $firstId)
        $thirdAssignment : CourseAssignment($thirdId : id, ta == $ta, courseDay == $courseDay, id != $firstId, id != $secondId)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end


/* A ta should only be assigned to one course per day */
rule "oneCoursePerDay"
    when
        $leftAssignment : CourseAssignment($leftId : id, $ta : ta, $courseDay : courseDay, ta != null)
        $rightAssignment : CourseAssignment(ta == $ta, courseDay == $courseDay, id > $leftId)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -1);
end


/* If a maximum number of assignments is specified for the
 * application, then the number of assignments to
 * one TA should not exceed this value.
 */
rule "maximumTotalAssignments"
    when
        $contractLine : MinMaxContractLine(
            contractLineType == ContractLineType.TOTAL_ASSIGNMENTS, maximumEnabled == true,
            $contract : contract, $maximumValue : maximumValue
        )
        TaAssignmentTotal(taContract == $contract, total > $maximumValue,
            $ta : ta, $total : total)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, ($maximumValue - $total) * $contractLine.getMaximumWeight());
end


/* If a minimum number of assignments is specified for the
 * application, then the number of assignments to
 * one TA should not exceed this value.
 */
rule "minimumTotalAssignments"
    when
        $contractLine : MinMaxContractLine(
            contractLineType == ContractLineType.TOTAL_ASSIGNMENTS, minimumEnabled == true,
            $contract : contract, $minimumValue : minimumValue
        )
        TaAssignmentTotal(taContract == $contract, total < $minimumValue,
            $ta : ta, $total : total)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, ($total - $minimumValue) * $contractLine.getMinimumWeight());
end
