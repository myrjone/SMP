/*
 * Copyright 2010 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.nurserostering.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import org.optaplanner.examples.nurserostering.domain.DayOfWeek;
import org.optaplanner.examples.nurserostering.domain.Ta;
import org.optaplanner.examples.nurserostering.domain.CourseAssignment;
import org.optaplanner.examples.nurserostering.domain.NurseRoster;
import org.optaplanner.examples.nurserostering.domain.NurseRosterParametrization;
import org.optaplanner.examples.nurserostering.domain.Course;
import org.optaplanner.examples.nurserostering.domain.CourseDate;
import org.optaplanner.examples.nurserostering.domain.CourseType;
import org.optaplanner.examples.nurserostering.domain.contract.Contract;
import org.optaplanner.examples.nurserostering.domain.contract.BooleanContractLine;
import org.optaplanner.examples.nurserostering.domain.contract.ContractLine;
import org.optaplanner.examples.nurserostering.domain.contract.ContractLineType;
import org.optaplanner.examples.nurserostering.domain.contract.MinMaxContractLine;
import org.optaplanner.examples.nurserostering.domain.request.DayOffRequest;
import org.optaplanner.examples.nurserostering.domain.request.DayOnRequest;
import org.optaplanner.examples.nurserostering.domain.request.CourseOffRequest;
import org.optaplanner.examples.nurserostering.domain.request.CourseOnRequest;
import org.optaplanner.examples.nurserostering.solver.drools.TaAssignmentTotal;
import org.optaplanner.examples.nurserostering.solver.drools.TaConsecutiveAssignmentEnd;
import org.optaplanner.examples.nurserostering.solver.drools.TaConsecutiveAssignmentStart;
import org.optaplanner.examples.nurserostering.solver.drools.TaFreeSequence;
import org.optaplanner.examples.nurserostering.solver.drools.TaWorkSequence;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

// This rule is build in
// All demanded courses must be assigned to a nurse
//rule "requiredTaSizePerCourse"
//    when
//        $course : Course(requiredTaSize > 0, $requiredTaSize : requiredTaSize)
//
//        $totalTaSize : Number(intValue != $requiredTaSize) from accumulate(
//            $assignment : CourseAssignment(course == $course),
//            count($assignment)
//        )
//    then
//        scoreHolder.addHardConstraintMatch(kcontext,
//                - Math.abs($requiredTaSize - $totalTaSize.intValue());
//end

// ############################################################################
// Soft constraints
// ############################################################################

rule "insertTaAssignmentTotal"
        salience 1 // Do these rules first (optional, for performance)
    when
        MinMaxContractLine(contractLineType == ContractLineType.TOTAL_ASSIGNMENTS, enabled == true,
            $contract : contract)
        $ta : Ta(contract == $contract)
        $assignmentTotal : Number() from accumulate(
            $assignment : CourseAssignment(ta == $ta),
            count($assignment)
        )
    then
        insertLogical(new TaAssignmentTotal($ta, $assignmentTotal.intValue()));
end

// Minimum number of assignments
rule "minimumTotalAssignments"
    when
        $contractLine : MinMaxContractLine(
            contractLineType == ContractLineType.TOTAL_ASSIGNMENTS, minimumEnabled == true,
            $contract : contract, $minimumValue : minimumValue
        )
        TaAssignmentTotal(taContract == $contract, total < $minimumValue,
            $ta : ta, $total : total)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, ($total - $minimumValue) * $contractLine.getMinimumWeight());
end

// Maximum number of assignments
rule "maximumTotalAssignments"
    when
        $contractLine : MinMaxContractLine(
            contractLineType == ContractLineType.TOTAL_ASSIGNMENTS, maximumEnabled == true,
            $contract : contract, $maximumValue : maximumValue
        )
        TaAssignmentTotal(taContract == $contract, total > $maximumValue,
            $ta : ta, $total : total)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, ($maximumValue - $total) * $contractLine.getMaximumWeight());
end


rule "insertTaConsecutiveAssignmentStart"
        salience 2 // Do these rules first (optional, for performance)
    when
        CourseAssignment(
            $ta : ta, ta != null,
            $dayIndex : courseDateDayIndex,
            $courseDate : courseDate
        )
        // The first day has no working day before it
        not CourseAssignment(ta == $ta, courseDateDayIndex == ($dayIndex - 1))
    then
        insertLogical(new TaConsecutiveAssignmentStart($ta, $courseDate));
end
rule "insertTaConsecutiveAssignmentEnd"
        salience 2 // Do these rules first (optional, for performance)
    when
        CourseAssignment(
            $ta : ta, ta != null,
            $dayIndex : courseDateDayIndex,
            $courseDate : courseDate
        )
        // The last day has no working day after it
        not CourseAssignment(ta == $ta, courseDateDayIndex == ($dayIndex + 1))
    then
        insertLogical(new TaConsecutiveAssignmentEnd($ta, $courseDate));
end

rule "insertTaWorkSequence"
        salience 1 // Do these rules first (optional, for performance)
    when
        TaConsecutiveAssignmentStart(
            $ta : ta,
            $firstDayIndex : courseDateDayIndex
        )

        TaConsecutiveAssignmentEnd(
            ta == $ta,
            courseDateDayIndex >= $firstDayIndex,
            $lastDayIndex : courseDateDayIndex
        )

        // There are no free days between the first and last day
        not TaConsecutiveAssignmentEnd(
            ta == $ta,
            courseDateDayIndex >= $firstDayIndex && < $lastDayIndex
        )
    then
        insertLogical(new TaWorkSequence($ta, $firstDayIndex, $lastDayIndex));
end

rule "insertTaFreeSequence"
        salience 1 // Do these rules first (optional, for performance)
    when
        TaConsecutiveAssignmentEnd(
            $ta : ta,
            $firstDayIndexMinusOne : courseDateDayIndex
        )

        TaConsecutiveAssignmentStart(
            ta == $ta,
            courseDateDayIndex > $firstDayIndexMinusOne,
            $lastDayIndexPlusOne : courseDateDayIndex
        )

        // There are no working days between the first and last day
        not TaConsecutiveAssignmentStart(
            ta == $ta,
            courseDateDayIndex > $firstDayIndexMinusOne && < $lastDayIndexPlusOne
        )
    then
        insertLogical(new TaFreeSequence($ta, $firstDayIndexMinusOne + 1, $lastDayIndexPlusOne - 1));
end
rule "insertFirstTaFreeSequence"
        salience 1 // Do these rules first (optional, for performance)
    when
        TaConsecutiveAssignmentStart(
            $ta : ta,
            $lastDayIndexPlusOne : courseDateDayIndex
        )

        // There are no working days before the first day
        not TaConsecutiveAssignmentEnd(
            ta == $ta,
            courseDateDayIndex < $lastDayIndexPlusOne
        )
        NurseRosterParametrization(firstCourseDateDayIndex < $lastDayIndexPlusOne, $firstDayIndex : firstCourseDateDayIndex)
    then
        insertLogical(new TaFreeSequence($ta, $firstDayIndex, $lastDayIndexPlusOne - 1));
end
rule "insertLastTaFreeSequence"
        salience 1 // Do these rules first (optional, for performance)
    when
        TaConsecutiveAssignmentEnd(
            $ta : ta,
            $firstDayIndexMinusOne : courseDateDayIndex
        )

        // There are no working days after the last day
        not TaConsecutiveAssignmentStart(
            ta == $ta,
            courseDateDayIndex > $firstDayIndexMinusOne
        )
        NurseRosterParametrization(lastCourseDateDayIndex > $firstDayIndexMinusOne, $lastDayIndex : lastCourseDateDayIndex)
    then
        insertLogical(new TaFreeSequence($ta, $firstDayIndexMinusOne + 1, $lastDayIndex));
end
rule "insertEntireTaFreeSequence"
        salience 1 // Do these rules first (optional, for performance)
    when
        $ta : Ta()
        // There are no working days after the last day
        not TaConsecutiveAssignmentStart(
            ta == $ta
        )
        NurseRosterParametrization($firstDayIndex : firstCourseDateDayIndex, $lastDayIndex : lastCourseDateDayIndex)
    then
        insertLogical(new TaFreeSequence($ta, $firstDayIndex, $lastDayIndex));
end

// Requested day on/off
rule "dayOffRequest"
    when
        $dayOffRequest : DayOffRequest($ta : ta, $courseDate : courseDate, $weight : weight)
        $assignment : CourseAssignment(ta == $ta, courseDate == $courseDate)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight);
end
rule "dayOnRequest"
    when
        $dayOnRequest : DayOnRequest($ta : ta, $courseDate : courseDate, $weight : weight)
        not CourseAssignment(ta == $ta, courseDate == $courseDate)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight);
end

// Requested course on/off
rule "courseOffRequest"
    when
        $courseOffRequest : CourseOffRequest($ta : ta, $course : course, $weight : weight)
        $assignment : CourseAssignment(ta == $ta, course == $course)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight);
end
rule "courseOnRequest"
    when
        $courseOnRequest : CourseOnRequest($ta : ta, $course : course, $weight : weight)
        not CourseAssignment(ta == $ta, course == $course)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight);
end
